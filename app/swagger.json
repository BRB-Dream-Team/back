{
  "openapi": "3.0.3",
  "info": {
    "title": "DreamTeam Crowdfunding Platform API",
    "description": "This is the API for the DreamTeam Crowdfunding Platform. It provides endpoints for managing users, contributors, entrepreneurs, startups, and contributions.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Operations about users"
    },
    {
      "name": "contributors",
      "description": "Operations about contributors"
    },
    {
      "name": "entrepreneurs",
      "description": "Operations about entrepreneurs"
    },
    {
      "name": "startups",
      "description": "Operations about startups"
    },
    {
      "name": "contributions",
      "description": "Operations about contributions"
    },
    {
      "name": "categories",
      "description": "Operations about categories"
    },
    {
      "name": "regions",
      "description": "Operations about regions"
    },
    {
      "name": "phones",
      "description": "Operations about phone numbers"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "description": "Create a new user in the system",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update an existing user",
        "description": "Update an existing user by Id",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user",
        "description": "Delete a user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contributors": {
      "post": {
        "tags": [
          "contributors"
        ],
        "summary": "Create a new contributor",
        "description": "Create a new contributor in the system",
        "operationId": "createContributor",
        "requestBody": {
          "description": "Created contributor object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contributor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/contributors/{contributorId}": {
      "get": {
        "tags": [
          "contributors"
        ],
        "summary": "Get contributor by ID",
        "description": "Returns a single contributor",
        "operationId": "getContributorById",
        "parameters": [
          {
            "name": "contributorId",
            "in": "path",
            "description": "ID of contributor to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contributor"
                }
              }
            }
          },
          "404": {
            "description": "Contributor not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "contributors"
        ],
        "summary": "Update an existing contributor",
        "description": "Update an existing contributor by Id",
        "operationId": "updateContributor",
        "parameters": [
          {
            "name": "contributorId",
            "in": "path",
            "description": "ID of contributor to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated contributor object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contributor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contributor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Contributor not found"
          }
        }
      },
      "delete": {
        "tags": [
          "contributors"
        ],
        "summary": "Delete a contributor",
        "description": "Delete a contributor",
        "operationId": "deleteContributor",
        "parameters": [
          {
            "name": "contributorId",
            "in": "path",
            "description": "Contributor id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Contributor not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contributions": {
      "post": {
        "tags": [
          "contributions"
        ],
        "summary": "Create a new contribution",
        "description": "Create a new contribution in the system",
        "operationId": "createContribution",
        "requestBody": {
          "description": "Created contribution object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contribution"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contribution"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "contributions"
        ],
        "summary": "List all contributions",
        "description": "Returns a list of all contributions",
        "operationId": "listContributions",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contribution"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contributions/{contributionId}": {
      "get": {
        "tags": [
          "contributions"
        ],
        "summary": "Get contribution by ID",
        "description": "Returns a single contribution",
        "operationId": "getContributionById",
        "parameters": [
          {
            "name": "contributionId",
            "in": "path",
            "description": "ID of contribution to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contribution"
                }
              }
            }
          },
          "404": {
            "description": "Contribution not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "contributions"
        ],
        "summary": "Update an existing contribution",
        "description": "Update an existing contribution by Id",
        "operationId": "updateContribution",
        "parameters": [
          {
            "name": "contributionId",
            "in": "path",
            "description": "ID of contribution to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated contribution object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contribution"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contribution"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Contribution not found"
          }
        }
      },
      "delete": {
        "tags": [
          "contributions"
        ],
        "summary": "Delete a contribution",
        "description": "Delete a contribution",
        "operationId": "deleteContribution",
        "parameters": [
          {
            "name": "contributionId",
            "in": "path",
            "description": "Contribution id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Contribution not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contributions/all/{startupId}": {
      "get": {
        "tags": [
          "contributions"
        ],
        "parameters": [
          {
            "name": "startupId",
            "in": "path",
            "description": "Startup Id to search all contributions from",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "summary": "List all contributions by startup id",
        "description": "Returns a list of all contributions",
        "operationId": "listAllContributionsByStartupId",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contribution"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/entrepreneurs": {
      "post": {
        "tags": [
          "entrepreneurs"
        ],
        "summary": "Create a new entrepreneur",
        "description": "Create a new entrepreneur in the system",
        "operationId": "createEntrepreneur",
        "requestBody": {
          "description": "Created entrepreneur object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntrepreneurInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entrepreneur"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/entrepreneurs/{entrepreneurId}": {
      "get": {
        "tags": [
          "entrepreneurs"
        ],
        "summary": "Get entrepreneur by ID",
        "description": "Returns a single entrepreneur",
        "operationId": "getEntrepreneurById",
        "parameters": [
          {
            "name": "entrepreneurId",
            "in": "path",
            "description": "ID of entrepreneur to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entrepreneur"
                }
              }
            }
          },
          "404": {
            "description": "Entrepreneur not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "entrepreneurs"
        ],
        "summary": "Update an existing entrepreneur",
        "description": "Update an existing entrepreneur by Id",
        "operationId": "updateEntrepreneur",
        "parameters": [
          {
            "name": "entrepreneurId",
            "in": "path",
            "description": "ID of entrepreneur to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated entrepreneur object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Entrepreneur"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entrepreneur"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Entrepreneur not found"
          }
        }
      },
      "delete": {
        "tags": [
          "entrepreneurs"
        ],
        "summary": "Delete an entrepreneur",
        "description": "Delete an entrepreneur",
        "operationId": "deleteEntrepreneur",
        "parameters": [
          {
            "name": "entrepreneurId",
            "in": "path",
            "description": "Entrepreneur id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Entrepreneur not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/startups": {
      "post": {
        "tags": [
          "startups"
        ],
        "summary": "Create a new startup",
        "description": "Create a new startup in the system",
        "operationId": "createStartup",
        "requestBody": {
          "description": "Created startup object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Startup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Startup"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "startups"
        ],
        "summary": "List all startups",
        "description": "Returns a list of all startups",
        "operationId": "listStartups",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Startup"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/startups/{startupId}": {
      "get": {
        "tags": [
          "startups"
        ],
        "summary": "Get startup by ID",
        "description": "Returns a single startup",
        "operationId": "getStartupById",
        "parameters": [
          {
            "name": "startupId",
            "in": "path",
            "description": "ID of startup to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Startup"
                }
              }
            }
          },
          "404": {
            "description": "Startup not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "startups"
        ],
        "summary": "Update an existing startup",
        "description": "Update an existing startup by Id",
        "operationId": "updateStartup",
        "parameters": [
          {
            "name": "startupId",
            "in": "path",
            "description": "ID of startup to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated startup object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Startup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Startup"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Startup not found"
          }
        }
      },
      "delete": {
        "tags": [
          "startups"
        ],
        "summary": "Delete a startup",
        "description": "Delete a startup",
        "operationId": "deleteStartup",
        "parameters": [
          {
            "name": "startupId",
            "in": "path",
            "description": "Startup id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Startup not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/categories": {
      "post": {
        "tags": [
          "categories"
        ],
        "summary": "Create a new category",
        "description": "Create a new category in the system",
        "operationId": "createCategory",
        "requestBody": {
          "description": "Created category object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "List all categories",
        "description": "Returns a list of all categories",
        "operationId": "listCategories",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/categories/{categoryId}": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Get category by ID",
        "description": "Returns a single category",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/regions": {
      "post": {
        "tags": [
          "regions"
        ],
        "summary": "Create a new region",
        "description": "Create a new region in the system",
        "operationId": "createRegion",
        "requestBody": {
          "description": "Created region object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Region"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Region"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "regions"
        ],
        "summary": "List all regions",
        "description": "Returns a list of all regions",
        "operationId": "listRegions",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/regions/{regionId}": {
      "get": {
        "tags": [
          "regions"
        ],
        "summary": "Get region by ID",
        "description": "Returns a single region",
        "operationId": "getRegionById",
        "parameters": [
          {
            "name": "regionId",
            "in": "path",
            "description": "ID of region to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Region"
                }
              }
            }
          },
          "404": {
            "description": "Region not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "regions"
        ],
        "summary": "Update an existing region",
        "description": "Update an existing region by Id",
        "operationId": "updateRegion",
        "parameters": [
          {
            "name": "regionId",
            "in": "path",
            "description": "ID of region to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated region object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Region"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Region"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Region not found"
          }
        }
      },
      "delete": {
        "tags": [
          "regions"
        ],
        "summary": "Delete a region",
        "description": "Delete a region",
        "operationId": "deleteRegion",
        "parameters": [
          {
            "name": "regionId",
            "in": "path",
            "description": "Region id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Region not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/phones": {
      "post": {
        "tags": [
          "phones"
        ],
        "summary": "Create a new phone",
        "description": "Create a new phone number in the system",
        "operationId": "createPhone",
        "requestBody": {
          "description": "Created phone object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Phone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Phone"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "phones"
        ],
        "summary": "List all phones",
        "description": "Returns a list of all phone numbers",
        "operationId": "listPhones",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Phone"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/phones/{phoneId}": {
      "get": {
        "tags": [
          "phones"
        ],
        "summary": "Get phone by ID",
        "description": "Returns a single phone number",
        "operationId": "getPhoneById",
        "parameters": [
          {
            "name": "phoneId",
            "in": "path",
            "description": "ID of phone to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Phone"
                }
              }
            }
          },
          "404": {
            "description": "Phone not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "phones"
        ],
        "summary": "Update an existing phone",
        "description": "Update an existing phone number by Id",
        "operationId": "updatePhone",
        "parameters": [
          {
            "name": "phoneId",
            "in": "path",
            "description": "ID of phone to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated phone object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Phone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Phone"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Phone not found"
          }
        }
      },
      "delete": {
        "tags": [
          "phones"
        ],
        "summary": "Delete a phone",
        "description": "Delete a phone number",
        "operationId": "deletePhone",
        "parameters": [
          {
            "name": "phoneId",
            "in": "path",
            "description": "Phone id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Phone not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email"
        ],
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The auto-generated id of the user"
          },
          "first_name": {
            "type": "string",
            "description": "The user's first name"
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name"
          },
          "email": {
            "type": "string",
            "description": "The user's email address"
          },
          "phone_id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the user's phone number"
          },
          "entrepreneur_id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the user's entrepreneur profile (if applicable)"
          },
          "contributor_id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the user's contributor profile (if applicable)"
          }
        }
      },
      "Contributor": {
        "type": "object",
        "properties": {
          "contributor_id": {
            "type": "integer",
            "format": "int64",
            "description": "The auto-generated id of the contributor"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "non_binary"
            ]
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "passport_id": {
            "type": "integer",
            "format": "int64"
          },
          "agreement_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ContributorInput": {
        "type": "object",
        "required": [
          "gender",
          "dob",
          "passport"
        ],
        "properties": {
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "non_binary"
            ]
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "passport": {
            "$ref": "#/components/schemas/Passport"
          },
          "bankAgreement": {
            "$ref": "#/components/schemas/BankAgreement"
          }
        }
      },
      "Contribution": {
        "type": "object",
        "required": [
          "start_date",
          "end_date",
          "amount",
          "startup_id",
          "contributor_id"
        ],
        "properties": {
          "contribution_id": {
            "type": "integer",
            "format": "int64",
            "description": "The auto-generated id of the contribution"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the contribution"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "description": "The end date of the contribution"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the contribution"
          },
          "startup_id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the startup being contributed to"
          },
          "contributor_id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the contributor"
          }
        }
      },
      "Passport": {
        "type": "object",
        "required": [
          "series",
          "number"
        ],
        "properties": {
          "series": {
            "type": "string"
          },
          "number": {
            "type": "integer"
          },
          "issue_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BankAgreement": {
        "type": "object",
        "properties": {
          "document": {
            "type": "object"
          },
          "is_signed": {
            "type": "boolean"
          }
        }
      },
      "Entrepreneur": {
        "type": "object",
        "properties": {
          "entrepreneur_id": {
            "type": "integer",
            "format": "int64",
            "description": "The auto-generated id of the entrepreneur"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "non_binary"
            ]
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "passport_id": {
            "type": "integer",
            "format": "int64"
          },
          "address_id": {
            "type": "integer",
            "format": "int64"
          },
          "agreement_id": {
            "type": "integer",
            "format": "int64"
          },
          "startup_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EntrepreneurInput": {
        "type": "object",
        "required": [
          "gender",
          "dob",
          "address",
          "passport"
        ],
        "properties": {
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "non_binary"
            ]
          },
          "dob": {
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "passport": {
            "$ref": "#/components/schemas/Passport"
          },
          "bankAgreement": {
            "$ref": "#/components/schemas/BankAgreement"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street_number": {
            "type": "integer"
          },
          "street_name": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "default": "Uzbekistan"
          },
          "zip": {
            "type": "integer"
          }
        }
      },
      "Startup": {
        "type": "object",
        "required": [
          "title",
          "active_status",
          "start_date",
          "end_date",
          "description",
          "video_link",
          "category_id",
          "region_id"
        ],
        "properties": {
          "startup_id": {
            "type": "integer",
            "format": "int64",
            "description": "The auto-generated id of the startup"
          },
          "title": {
            "type": "string",
            "description": "The title of the startup"
          },
          "active_status": {
            "type": "boolean",
            "description": "Whether the startup is active or not"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the startup"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "description": "The end date of the startup"
          },
          "description": {
            "type": "string",
            "description": "The description of the startup"
          },
          "video_link": {
            "type": "object",
            "description": "The video link for the startup"
          },
          "donated_amount": {
            "type": "number",
            "description": "The amount donated to the startup"
          },
          "number_of_contributors": {
            "type": "integer",
            "description": "The number of contributors to the startup"
          },
          "rating": {
            "type": "integer",
            "description": "The rating of the startup"
          },
          "type": {
            "type": "string",
            "enum": [
              "charity",
              "equity"
            ],
            "description": "The type of the startup"
          },
          "batch": {
            "type": "string",
            "enum": [
              "close_to_the_goal",
              "just_launched",
              "finished",
              "none"
            ],
            "description": "The batch status of the startup"
          },
          "category_id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the category the startup belongs to"
          },
          "region_id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the region the startup is in"
          }
        }
      },
      "Category": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "category_id": {
            "type": "integer",
            "format": "int64",
            "description": "The auto-generated id of the category"
          },
          "name": {
            "type": "string",
            "description": "The name of the category"
          }
        }
      },
      "Region": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "region_id": {
            "type": "integer",
            "format": "int64",
            "description": "The auto-generated id of the region"
          },
          "name": {
            "type": "string",
            "description": "The name of the region"
          }
        }
      },
      "Phone": {
        "type": "object",
        "required": [
          "mobile_operator_code",
          "phone_number"
        ],
        "properties": {
          "phone_id": {
            "type": "integer",
            "format": "int64",
            "description": "The auto-generated id of the phone"
          },
          "country_code": {
            "type": "integer",
            "description": "The country code",
            "default": 998
          },
          "mobile_operator_code": {
            "type": "integer",
            "description": "The mobile operator code"
          },
          "phone_number": {
            "type": "integer",
            "description": "The phone number"
          }
        }
      }
    }
  }
}